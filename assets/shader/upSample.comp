#version 430 core

// Input textures
layout (binding = 0) uniform sampler2D srcTexture;      // Source texture (half the size of destTexture)
layout (binding = 1) uniform sampler2D srcTexture2;     // Current texture to upsample

// Output texture
layout (binding = 2, r11f_g11f_b10f) uniform image2D destTexture; // Output texture for results

// Filter radius in texture coordinates
uniform float filterRadius;

// Define local work group size
layout (local_size_x = 8, local_size_y = 8) in;

void main()
{
    ivec2 destSize = imageSize(destTexture); // Get destination texture size
    ivec2 destCoord = ivec2(gl_GlobalInvocationID.xy); // Current pixel being processed

    // Convert destination coordinate to source coordinate
    vec2 srcTexelSize = 1.0 / textureSize(srcTexture, 0); // Size of a single texel in the source texture
    vec2 srcCoord = vec2(destCoord + 0.5) / 2.0; // Scale down the destination coordinate to match the source texture

    // Take 9 samples around the current texel in the source texture
    float x = filterRadius;
    float y = filterRadius;

    // Ensure correct sampling from the source texture
    vec3 a = texture(srcTexture, (srcCoord) * srcTexelSize + vec2(-x, y)).rgb;
    vec3 b = texture(srcTexture, (srcCoord) * srcTexelSize + vec2(0, y)).rgb;
    vec3 c = texture(srcTexture, (srcCoord) * srcTexelSize + vec2(x, y)).rgb;

    vec3 d = texture(srcTexture, (srcCoord) * srcTexelSize + vec2(-x, 0)).rgb;
    vec3 e = texture(srcTexture, srcCoord * srcTexelSize).rgb; // Current texel from srcTexture
    vec3 f = texture(srcTexture, (srcCoord) * srcTexelSize + vec2(x, 0)).rgb;

    vec3 g = texture(srcTexture, (srcCoord) * srcTexelSize + vec2(-x, -y)).rgb;
    vec3 h = texture(srcTexture, (srcCoord) * srcTexelSize + vec2(0, -y)).rgb;
    vec3 i = texture(srcTexture, (srcCoord) * srcTexelSize + vec2(x, -y)).rgb;

    // Apply weighted distribution using a 3x3 tent filter
    vec3 upsample = e * 4.0;
    upsample += (b + d + f + h) * 2.0;
    upsample += (a + c + g + i);
    upsample *= 1.0 / 16.0;

    // Read from the current texture (srcTexture2)
    vec3 currentColor = texture(srcTexture2, srcCoord * srcTexelSize).rgb; // Adjust to match srcTexture size

    // Blend the upsampled result with the current texture color
//    vec3 finalColor = clamp(upsample + currentColor, 0.0, 1.0); // Clamp to prevent overflow

    // Write the final color to the destination texture
    imageStore(destTexture, destCoord, vec4(upsample + currentColor, 1.0f));
    //imageStore(destTexture, destCoord, vec4(upsample + currentColor, 1.0f));
}
