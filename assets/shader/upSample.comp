#version 430 core

// Compute Shader for upsampling
// srcTexture is half the size of destTexture

// Input texture
layout (binding = 0) uniform sampler2D srcTexture;
layout (binding = 1) uniform sampler2D srcTexture2;

// Output texture
layout (binding = 2, rgba32f) uniform image2D destTexture;

// Filter radius in texture coordinates
uniform float filterRadius;

layout (local_size_x = 16, local_size_y = 16) in;

void main()
{
    ivec2 destSize = imageSize(destTexture);
    ivec2 destCoord = ivec2(gl_GlobalInvocationID.xy);

    // Convert destination coordinate to source coordinate
    vec2 srcCoord = (vec2(destCoord) / vec2(destSize)) * 2.0;
    vec2 texCoord = destCoord * 0.5;

    // Filter radius in texture coordinates
    float x = filterRadius;
    float y = filterRadius;

    vec2 srcTexelSize = 1.0 / textureSize(srcTexture, 0);

    // Take 9 samples around the current texel
    vec3 a = texture(srcTexture, (texCoord + vec2(-x, y)) * srcTexelSize).rgb;
    vec3 b = texture(srcTexture, (texCoord + vec2(0, y)) * srcTexelSize).rgb;
    vec3 c = texture(srcTexture, (texCoord + vec2(x, y)) * srcTexelSize).rgb;

    vec3 d = texture(srcTexture, (texCoord + vec2(-x, 0)) * srcTexelSize).rgb;
    vec3 e = texture(srcTexture, (texCoord * srcTexelSize)).rgb;
    vec3 f = texture(srcTexture, (texCoord + vec2(x, 0)) * srcTexelSize).rgb;

    vec3 g = texture(srcTexture, (texCoord + vec2(-x, -y)) * srcTexelSize).rgb;
    vec3 h = texture(srcTexture, (texCoord + vec2(0, -y)) * srcTexelSize).rgb;
    vec3 i = texture(srcTexture, (texCoord + vec2(x, -y)) * srcTexelSize).rgb;
   
    // Apply weighted distribution, by using a 3x3 tent filter
    vec3 upsample = e * 4.0;
    upsample += (b + d + f + h) * 2.0;
    upsample += (a + c + g + i);
    upsample *= 1.0 / 16.0;

    vec4 color = texture(srcTexture2, vec2(destCoord) / vec2(destSize));
//    vec3 finalColor = color.rgb + upsample;
    // Write result to the destination texture
    // imageStore(destTexture, destCoord, vec4(currentValue,1.0f));
     imageStore(destTexture, destCoord, vec4(upsample, 1.0f));


}
