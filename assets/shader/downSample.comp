#version 430 core

// Input image texture (source) and output (destination)
layout (binding = 0) uniform sampler2D srcTexture;  // Floating-point HDR source texture
layout (binding = 1, r11f_g11f_b10f) uniform image2D destTexture; // Output texture

uniform int mipLevel = 1;      // Mip level we're writing to

// Local work group size (modify as needed based on your hardware)
layout (local_size_x = 16, local_size_y = 16) in;

vec3 PowVec3(vec3 v, float p) {
    return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));
}

const float invGamma = 1.0 / 2.2;
vec3 ToSRGB(vec3 v) { 
    return PowVec3(v, invGamma); 
}

float sRGBToLuma(vec3 col) {
    return dot(col, vec3(0.299f, 0.587f, 0.114f)); // Use standard luma formula
}

float KarisAverage(vec3 col) {
    float luma = sRGBToLuma(ToSRGB(col)) * 0.25f;
    return 1.0f / (1.0f + luma);
}

void main() {
    ivec2 destCoord = ivec2(gl_GlobalInvocationID.xy);  // Coordinates for the destination texture (1x scale)
    
    // Ensure we're within destination texture bounds
    ivec2 destResolution = imageSize(destTexture); // Fetch the destination texture size
    if (destCoord.x >= destResolution.x || destCoord.y >= destResolution.y) return;
    
    // Scale coordinates to map to the source texture (2x larger)
    vec2 srcCoord = vec2(destCoord) * 2.0;  // Each destination texel maps to a 2x2 block in source
    
    // Compute texel size for the source texture
    vec2 srcResolution = textureSize(srcTexture, 0);
    vec2 srcTexelSize = 1.0 / vec2(srcResolution);

    float x = srcTexelSize.x;
    float y = srcTexelSize.y;


    //Sample 13 texels around the current source texel (center 'e')
    vec3 a = texture(srcTexture, (srcCoord + vec2(-2, 2)) * srcTexelSize).rgb;
    vec3 b = texture(srcTexture, (srcCoord + vec2(0, 2)) * srcTexelSize).rgb;
    vec3 c = texture(srcTexture, (srcCoord + vec2(2, 2)) * srcTexelSize).rgb;

    vec3 d = texture(srcTexture, (srcCoord + vec2(-2, 0)) * srcTexelSize).rgb;
    vec3 e = texture(srcTexture, srcCoord * srcTexelSize).rgb;
    vec3 f = texture(srcTexture, (srcCoord + vec2(2, 0)) * srcTexelSize).rgb;

    vec3 g = texture(srcTexture, (srcCoord + vec2(-2, -2)) * srcTexelSize).rgb;
    vec3 h = texture(srcTexture, (srcCoord + vec2(0, -2)) * srcTexelSize).rgb;
    vec3 i = texture(srcTexture, (srcCoord + vec2(2, -2)) * srcTexelSize).rgb;

    vec3 j = texture(srcTexture, (srcCoord + vec2(-1, 1)) * srcTexelSize).rgb;
    vec3 k = texture(srcTexture, (srcCoord + vec2(1, 1)) * srcTexelSize).rgb;
    vec3 l = texture(srcTexture, (srcCoord + vec2(-1, -1)) * srcTexelSize).rgb;
    vec3 m = texture(srcTexture, (srcCoord + vec2(1, -1)) * srcTexelSize).rgb;

 

    // Weighted downsampling
    vec3 downsample;
    if (mipLevel == 0) {
        // Apply Karis average for mip 0
        vec3 groups[5];
        groups[0] = (a + b + d + e) * (0.125f / 4.0f);
        groups[1] = (b + c + e + f) * (0.125f / 4.0f);
        groups[2] = (d + e + g + h) * (0.125f / 4.0f);
        groups[3] = (e + f + h + i) * (0.125f / 4.0f);
        groups[4] = (j + k + l + m) * (0.5f / 4.0f);

        // Apply Karis average to each group
        for (int idx = 0; idx < 5; ++idx) {
            groups[idx] *= KarisAverage(groups[idx]);
        }

        downsample = groups[0] + groups[1] + groups[2] + groups[3] + groups[4];
        downsample = max(downsample, 0.0001f);
    } else {
        // Regular weighted downsample
        downsample = e * 0.125;
        downsample += (a + c + g + i) * 0.03125;
        downsample += (b + d + f + h) * 0.0625;
        downsample += (j + k + l + m) * 0.125;
    }

    // Write the downsampled value to the destination texture
    imageStore(destTexture, destCoord, vec4(downsample, 1.0));

}
